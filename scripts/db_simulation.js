
// global variables
/**
map that contains (table_id: number, table_name: String) pairs. Table may be understood as a project, so tasks and
categories declared in one table are not visible in other tables.
 */
let tables = new Map();
/**
array that contains categories, where category is an object containing
fields:
    id          : number,
    tableId     : number
    name        : String
    color       : String
    isSelected  : bool
 */
let categories = [];
/**
array that contains tasks, where task is an object containing
fields:
    id              : number,
    tableId         : number,
    title           : String,
    description     : String,
    start           : Date,
    end             : Date,
    hashTags        : Array<String>,
    category        : number
 */
let tasks = [];
/**
 * when some objects require unique id it is generated by adding one to this variable and setting it's value to the
 * incremented value
 * @type {number}
 */
let lastId = -1;



// default values for presentation purposes ////////////////////////////////////////////////////////////////////////////



function initTables()
{
    addTable("Birthday Party");
    addTable("Work");
}



function initCategories()
{
    let firstTableId = Array.from(tables.keys())[0];

    addCategoryDBOnly(firstTableId, "Balloons");
    addCategoryDBOnly(firstTableId, "Music");
}



function initTasks()
{
    let firstTableId    = getAllTables().keys()[0];
    let firstCatId      = getAllCategories()[0].id;

    let startDate1 = new Date();
    let startDate2 = new Date();
    startDate2.setDate(startDate1.getDate() + 2);

    addTaskDBOnly(firstTableId, "choose colors", "choose colors of balloons", startDate1, startDate2,
        ["color", "balloons"], firstCatId);
    addTaskDBOnly(firstTableId, "choose shop", "choose in which shop to buy balloons", startDate1, startDate2,
        ["buy", "balloons"], firstCatId);
    addTaskDBOnly(firstTableId, "order a cake", "1. find a good bakery, 2. decide whether price is good, 3. choose a cake, 4. order invoice, 5. pay",
        startDate1, startDate2, [], firstCatId);
}


// cookies /////////////////////////////////////////////////////////////////////////////////////////////////////////////
const TABLES_ID         = "tables";
const CATEGORIES_ID     = "categories";
const TASKS_ID          = "tasks";
const LAST_ID_ID        = "last_id";


function storeDBInCookies()
{
    storeTables();
    storeCategories();
    storeTasks();
    storeLastId();
}



function loadDBFromCookies()
{
    loadTablesFromCookies();
    loadCategoriesFromCookies();
    loadTasksFromCookies();
    loadLastIdFromCookies();
}



function storeTables()
{
    setCookie(TABLES_ID, JSON.stringify(Array.from(tables.entries())), 1000);
}



function loadTablesFromCookies()
{
    let tablesCookie = getCookie(TABLES_ID);

    if (tablesCookie !== "")
    {
        tables = new Map(JSON.parse(tablesCookie));
    }
    else
    {
        tables = new Map();
        initTables();
    }
}



function storeCategories()
{
    setCookie(CATEGORIES_ID, JSON.stringify(categories), 1000);
}



function loadCategoriesFromCookies()
{
    let categoriesCookie = getCookie(CATEGORIES_ID);

    if (categoriesCookie !== "")
    {
        categories = JSON.parse(categoriesCookie);
    }
    else
    {
        categories = [];
        initCategories();
    }
}



function storeTasks()
{
    setCookie(TASKS_ID, JSON.stringify(tasks), 1000);
}



function loadTasksFromCookies()
{
    let tasksCookie = getCookie(TASKS_ID);

    if (tasksCookie !== "")
    {
        tasks = JSON.parse(tasksCookie);

        tasks.forEach(function(task)
        {
            task.start  = new Date(Date.parse(task.start));
            task.end    = new Date(Date.parse(task.end));
        })
    }
    else
    {
        tasks = [];
        initTasks();
    }
}



function storeLastId()
{
    setCookie(LAST_ID_ID, JSON.stringify(lastId), 1000);
}


function loadLastIdFromCookies()
{
    let lastIdCookie = getCookie(LAST_ID_ID);

    if (lastIdCookie !== null)
    {
        lastId = parseInt(lastIdCookie, 10);
    }
    else
    {
        lastId = -1;
    }
}



function getCookie(cookieName)
{
    let name            = cookieName + "=";
    let decodedCookie   = decodeURIComponent(document.cookie);
    let ca              = decodedCookie.split(';');
    let c;

    for(let i = 0; i <ca.length; i++)
    {
        c = ca[i];
        while (c.charAt(0) === ' ')
        {
            c = c.substring(1);
        }
        if (c.indexOf(name) === 0)
        {
            return c.substring(name.length, c.length);
        }
    }
    return "";
}



function setCookie(name, value, daysTillExpire)
{
    let d = new Date();
    d.setTime(d.getTime() + (daysTillExpire * 24 * 60 * 60 * 1000));    // transform days to milliseconds
    let expires = "expires="+ d.toUTCString();

    document.cookie = name + "=" + value + ";" + expires + ";path=/";
}



// db access functions /////////////////////////////////////////////////////////////////////////////////////////////////



// tables ////////////////////////////////////////////////////////////////////////////////////



function addTable(name)
{
    let id          = -1;
    let isNameUnq   = isTableNameUnique(name);

    if (isNameUnq)
    {
        let id = generateUniqueId();
        tables.set(id, name);
        storeTables();
        storeLastId();
    }

    return [id, isNameUnq];
}



function isTableNameUnique(name)
{
    for (let tabName of tables.values())
    {
        if (tabName === name)
        {
            return false;
        }
    }

    return true;
}



function deleteTable(name)
{
    for (let idName of tables.entries())
    {
        if (idName[1] === name)
        {
            tables.delete(idName[0]);

            for (let category of categories)
            {
                if (category.tableId == idName[0])
                {
                    deleteCategory(category.id);
                }
            }
            storeTables();
            storeLastId();
            return true;
        }
    }

    return false;
}



function getTableId(tabName)
{
    for (let idName of tables.entries())
    {
        if (idName[1] === tabName)
        {
            return idName[0];
        }
    }

    return -1;
}



function getAllTables()
{
    return tables;
}



// categories ////////////////////////////////////////////////////////////////////////////////



function addCategoryDBOnly(tableId, name)
{
    let id = generateUniqueId();

    let newCategory = {
        id          : id,
        tableId     : tableId,
        name        : name,
        color       : getRandomColor(),
        isSelected  : false
    };

    categories.push(newCategory);
    storeCategories();
    storeLastId();
}



function addCategory(tableId, name)
{
    return addCategoryDBOnly(tableId, name);
}



function deleteCategory(categoryId)
{
    categories = categories.filter(category => category.id != categoryId);
    tasks       = tasks.filter(task => task.category != categoryId);

    storeCategories();
    storeTasks();
    storeLastId();
}



function getAllCategories()
{
    return categories;
}



function getCategoryById(categoryId)
{
    for (let category of categories)
    {
        if (category.id == categoryId)
        {
            return category;
        }
    }
}



function isCategoryNameUniqueInTable(tableId, categoryName)
{
    let categoriesWithTheSameName = categories.filter(category =>
        category.tableId === tableId &&
        category.name === categoryName);

    return categoriesWithTheSameName.length === 0;
}



// tasks /////////////////////////////////////////////////////////////////////////////////////



function addTaskDBOnly(tableId, title, description, start, end, hashTags, category)
{
    let id = generateUniqueId();

    let newTask = {
        id          : id,
        tableId     : tableId,
        title       : title,
        description : description,
        start       : start,
        end         : end,
        hashTags    : hashTags,
        category    : category
    };

    tasks.push(newTask);

    storeTasks();
    storeLastId();

    return newTask;
}


/**
 *
 * @param tableId: number
 * @param title: string
 * @param description: string
 * @param start: date
 * @param end: date
 * @param hashTags: array<string>
 * @param category: number
 */
function addTask(tableId, title, description, start, end, hashTags, category)
{
    let newTask = addTaskDBOnly(tableId, title, description, start, end, hashTags, category);
    refreshEvents();

    return newTask.id;
}



function deleteTask(taskId)
{
    tasks = tasks.filter(task => task.id !== taskId);

    refreshEvents();
    storeTasks();
    storeLastId();
}



function getAllTasks()
{
    return tasks;
}

function getTaskById(id) {
    for (let t in tasks) {
        if (tasks[t].id.toString() === id) {
            return tasks[t];
        }
    }
}



function updateTask(task, title, description, start, end, hashTags, category)
{
    task.title          = title;
    task.description    = description;
    task.start          = start;
    task.end            = end;
    task.hashTags       = hashTags;
    task.category       = category;

    refreshEvents();
    storeTasks();
    storeLastId();
}



// utils ///////////////////////////////////////////////////////////////////////////////////////////////////////////////



function generateUniqueId()
{
    lastId = lastId + 1;
    return lastId;
}



function getRandomColor()
{
    let letters = "0123456789ABCD";
    let color   = "#";

    for (let i = 0; i < 6; i++)
    {
        color += letters[Math.floor(Math.random() * (letters.length - 1))];
    }

    return color;
}
